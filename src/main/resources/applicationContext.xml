<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

    <!-- 引入外部属性配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--<property name="location" value="classpath:jdbc.properties" />-->
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
                <value>classpath*:sysConfig.properties</value>
            </list>
        </property>
    </bean>
    <!-- 测试引用外部配置文件属性加密处理.需继承PropertyPlaceholderConfigurer类并重写 -->
    <!--<bean id="propertyConfigurer"
          class="com.xinda.system.sys.converter.EncryptPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:jdbc_encrypt.properties</value>
                <value>classpath*:sysConfig.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8" ></property>
    </bean>-->

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"></property>

        <property name="validationQuery" value="SELECT 1"/> <!--检测时候用到的语句，随便写一条即可-->
        <!--是否要进行检测-->
        <property name="testWhileIdle" value="true"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,保险起见还是检测吧-->
        <property name="testOnBorrow" value="true"/>
        <!--归还连接时执行validationQuery检测连接是否有效-->
        <property name="testOnReturn" value="true"/>

    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:/**/*Mapper.xml"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper"/>
            </array>
        </property>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <!-- mapper definition -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="**.*.mapper"/>
    </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 文件大小最大值 1024*1024*100-->
        <property name="maxUploadSize" value="104857600"/>
        <!-- 内存中的最大值 1024*10-->
        <property name="maxInMemorySize" value="10140"/>
    </bean>

    <!-- web.xml中首先会加载上下文配置文件,然后加载springMVC配置文件 -->
    <!-- 
    	服务器启动时配置文件的执行顺序为：
		1.web.xml
		2.application-context.xml spring的配置文件。上下文配置文件
		3.servlet-context.xml SpringMVC的配置文件。
		要实现事务，必须使service层在control之前被扫描，否则control中装载的service不包含事务增强。
     -->
    <!-- 引入service层添加事务 -->
    <context:component-scan base-package="**.*.service"/>

</beans>